두 개 뽑아서 더하기
문제 설명
정수 배열 numbers가 주어집니다. numbers에서 서로 다른 인덱스에 있는 두 개의 수를 뽑아 더해서 만들 수 있는 모든 수를 배열에 오름차순으로 담아 return 하도록 solution 함수를 완성해주세요.

제한사항
numbers의 길이는 2 이상 100 이하입니다.
numbers의 모든 수는 0 이상 100 이하입니다.
입출력 예
numbers	result
[2,1,3,4,1]	[2,3,4,5,6,7]
[5,0,2,7]	[2,5,7,9,12]
입출력 예 설명
입출력 예 #1

2 = 1 + 1 입니다. (1이 numbers에 두 개 있습니다.)
3 = 2 + 1 입니다.
4 = 1 + 3 입니다.
5 = 1 + 4 = 2 + 3 입니다.
6 = 2 + 4 입니다.
7 = 3 + 4 입니다.
따라서 [2,3,4,5,6,7] 을 return 해야 합니다.
입출력 예 #2

2 = 0 + 2 입니다.
5 = 5 + 0 입니다.
7 = 0 + 7 = 5 + 2 입니다.
9 = 2 + 7 입니다.
12 = 5 + 7 입니다.
따라서 [2,5,7,9,12] 를 return 해야 합니다.

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.TreeSet;
import java.util.Set;


HashSet
 HashSet은 Set 컬렉션을 구현하는 대표적인 클래스이다. 
 데이터를 중복 저장할 수 없고 순서를 보장하지 않는다. HashSet을 생성하는 방법은 아래와 같다.
 
TreeSet
 TreeSet도 HashSet과 같이 중복된 데이터를 저장할 수 없고 입력한 순서대로 값을 저장하지 않는다. 
 차이점은 TreeSet은 기본적으로 오름차순으로 데이터를 정렬한다. 예제를 통해서 알아보자.
 
LinkedHashSet
LinkedHashSet도 중복된 데이터를 저장할 수 없다. 차이점은 입력된 순서대로 데이터를 관리한다.  

class Solution {
    public int[] solution(int[] numbers) {
    	
    	Set<Integer> set = new TreeSet<Integer>();
        int[] answer = null;
        
        //Set : List와 다르게 중복된 값을 가질 수 없다.(집합과 같은 개념)
        for(int i = 0 ; i < numbers.length ; i++) {
        	for(int j = i+1 ; j < numbers.length ; j++) {
        		set.add(numbers[i]+numbers[j]);
        	}
        }
        
        // integer 배열로 변환하여 반환 
        answer = set.stream().mapToInt(Integer::intValue).toArray();
        
        return answer;
    }
}