
데이터베이스 트랜잭션(Transaction)
 - All or Nothing(All Commit Or All Rollback)
 - 단일한 논리적인 작업 단위(a single logical unit of work)
 - 여러 SQL문들을 단일 작업으로 묶어서 나눠질 수 없게 만든 것이 translation
 - commit은 DB에 영구적으로 저장하라 & transaction 종료의 의미
 - Spring or Spring boot @Transactional 어노테이션 활용

Atomicity(원자성) : Transaction은 논리적으로 쪼개질 수 없는 작업 단위이기 때문에
                               All or Nothing의 성격을 갖는다.

Consistency(일관성) : 테이블의 데이터 제약 조건 등을 준수하여 일관되게 데이터를 보관한다.
Isolation(격리성/고립성) : 여러 트랜잭션이 동시에 실행될 때도 transaction이 독립적으로 실행되는 것처럼 동작한다.
Durability(영존성) : 한 번 commit된 데이터는 DBMS에 영구적으로 저장한다.
                    DB System에 문제가 생겨도 데이터는 물리적인 메모리에 저장한다.



ㅁ 상속(extends) : 연관된 일련의 클래스들에 대해 공통적인 규약을 정의할 수 있습니다.
		     상속에 대한 오해로 클래스의 재활용을 위한 디자인이 아닙니다.

ㅁ 정보은닉(캡슐화) : 제네릭과 비슷하게 논리적 오류를 발생시키지 않기 위해 문법적 오류를 발생시켜 컴파일 단계에서 에러를 검출할 수 있도록 클래스 내의 멤버 변수에 정보 은닉을 해줘야 합니다.
		1) private : 클래스 내부에서만 접근할 수 있습니다. 따라서 값을 초기화하기 위해서는
			     public한 getter/setter 메소드를 통해서만 진행하도록 합니다.
		2)

ㅁ Web Server / Was Server
    - Web Server : Html, CSS, Image와 같은 정적인 콘텐츠를 제공하는 서버(Static)
    - Was Server : DB 조회 등의 데이터를 조회하고 동적인 콘텐츠를 제공하는 서버(Dynamic)
    - Web Server를 사용하면 좋은 점 : Was Server 로드 밸런싱 가능
                                 리버스프록시를 사용하여 보안 강화 가능


ㅁ Spring WebFlux

  
ㅁ Spring AOP(Aspect Oriented Programming, 관점 지향 프로그래밍)
    - 부가적인 로직을 모듈화 하여 개발자는 비즈니스 로직(핵심 로직)에 집중할 수 있다.
    - 중복되는 소스 코드를 줄이고 공통 소스를 재사용 할 수 있다.
    - 스프링 Bean 객체에만 지정할 수 있으며, 스프링 AOP는 *프록시 패턴을 활용하여 런타임 시 실행된다.


ㅁ Spring Batch
JobRepository 수행되는 Job 의 모든 정보를 담고 있는 저장소.
    - 어떠한 Job 이 언제 수행되었고, 언제 종료하고, 몇 번 실행되었고, 실행에 대한 결과가 어떤지 등의 Batch 수행과 과련된 모든 Meta Data 가 저장.
    - Job 이 실행되게 되면 JobRepository 에 JobExecution 과 StepExecution 을 생성하고, JobRepository 에서 Execution 정보들을 저장하고 조회하며 사용.
Item
    - 처리할 데이터의 가장 작은 구성 요소.
    - 예를들면, 파일의 한줄, DB의 한 Row, XML 의 특정 element.

ItemReader
    - Step 에서 Item 을 읽어오는 인터페이스.
    - 다양한 인터페이스가 존재하여 다양한 방법으로 Item 을 읽음.
    - DB 데이터뿐만 아니라, File, XML, JSON, CSV 등 읽어 올 수 있음.
ItemWriter
    - 처리된 Data 를 Writer 할 때 사용.



ㅁ Embedding 이란
	텍스트를 실수 벡터 형태로 표현한 결과물을 의미합니다.
	숫자 형태로 인코딩 된 텍스트의 길이가 매우 길고 가변성이 크기 때문에
	실수 벡터 형태로 구성된 고정적인 길이의 입력값인 인베딩 기법으로
	만들어진 벡터값을 전달해준다.
	벡터값의 유사도가 가장 높은 임베딩 값을 찾아내 의미 기반 검색, 추천 등의 기능을 제공할 수 있습니다.

ㅁ 벡터 디비란?
	LLM을 비롯한 AI 모델에 특화된 새로운 유형의 디비입니다.
	고차원의 실수 벡터 인덱스를 효율적으로 저장하는 데 특화되어 있습니다.
	쿼리 또한 임베딩 형태로 표현되어 있습니다.

ㅁ LLM이란
	Large Language Model은 다양한 자연어 처리 작업을 수행할 수 있는 딥 러닝 모델입니다.
	방대한 양의 데이터를 기반으로 사전 학습된 초대형 딥 러닝 모델입니다.
	할루시네이션 등이 문제점이자 단점이다.

ㅁ RAG(Retrieval-Augmented Generation)란
	대규모 언어 모델의 출력을 최적화하여 응답을 생성하기 전에 학습 데이터 소스 외부의
	지식 베이스를 참조할 수 있도록 합니다.(PDF, HTML, TEXT 등)


Subscriber -> Publisher: 구독 요청
Publisher -> Subscriber: Subscription 정보 전달
Subscriber -> Subscription -> Publisher: Subscription의 request 함수를 통해 Publisher에게 요청
Publisher -> Subscription -> Subscriber: Subscription의 시그널(onNext, onComplete, onError 등)을 응답
Mono와 Flux
Flux와 Mono는 Reactive Stream의 구현체인 Reactor 객체이며, 차이점은 발행하는 데이터 갯수이다.
Flux: 0 ~ N 개의 데이터 전달
Mono: 0 ~ 1 개의 데이터 전달

    * Flux: 0 ~ N 개의 데이터 전달
    * Mono: 0 ~ 1 개의 데이터 전달

oh my god !
oh my god !
oh my god !
oh my god !
oh my god !
oh my god !
oh my god !
oh my god !




ㅁ 동기(Synchronous) 방식
	- 요청을 보내고 실행이 끝나면 다음 동작을 처리하는 방식
	- 순서에 맞춰 진행되기 때문에 제어하기 쉽다.
	- 여러가지 요청을 동시에 처리할 수 없어 효율이 떨어진다.
ㅁ 비동기(Asynchronous) 방식
	- 요청을 보내고 해당 동작의 처리 여부와 상관없이 다음 요청이 동작하는 방식 
	- 작업이 완료되는 시간을 기다릴 필요가 없기 때문에 자원을 효율적으로 사용할 수 있다.
	- 작업이 완료된 결과를 제어하기 어렵다.










